#!/usr/bin/env ruby

require 'collectd/interface/options'
require 'collectd/interface/config'

exec_name = File.split(__FILE__)[-1]
help = <<-EOF
Synopsis
========

#{exec_name}: Web Interface to your local Collectd data.

Usage
-----

#{exec_name} [OPTIONS]

  OPTIONS: see below.

Options
-------

  --help,-h:
    Show this help information.
  --debug, -d:
    More verbose output while running this.
  --port,-p NUMBER:
    Start the REST server at port NUMBER.
  --files, -f PATH:
    RRD files are located in PATH.
    Default is /var/lib/collectd/rrd 
  --log-file-path,-l PATH:
    Write the log output to PATH.
  --pid-file-path, -P PATH:
    Write the process ID to a file in PATH.
  --plugin-path, -I PATH:
    Path to additional graph and report plugins.
  --graph-path, -G PATH:
    Working area for graph storage.

Examples
--------

Run the stuff in debug-mode:

   #{exec_name} -d

Start the server as root service:

   #{exec_name} -p 5000 -l /var/log/ -P /var/run/

EOF

begin

  Collectd::Interface::Options.help = help
  Collectd::Interface::Options.parse
  # drop the process PID into a file if the user asks for it
  unless Collectd::Interface::Config.pid_file?
    _pid_file = Collectd::Interface::Config.pid_file(exec_name)
    File.open(_pid_file,'w') { |file| file.write "#{$$} " }
  end
  # pipe program output to a file if the users asks for it
  unless Collectd::Interface::Config.log_file?
    _log_file = Collectd::Interface::Config.log_file(exec_name)
    $stdout.reopen(_log_file,'w')
    $stdout.sync = true
    $stderr.reopen($stdout)
  end
  # don't require Sinatra before options have been set in the configuration object!
  require 'collectd/interface/service'
  Collectd::Interface::Service.run!

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts "  use -h for detailed instructions"
  if Collectd::Interface::Config.debug?
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

